;; Includes
(include "eww-bar/modules/workspace.yuck")
(include "eww-bar/modules/date.yuck")
(include "eww-bar/modules/powermenu.yuck")

;; Variables
(defvar eww "$HOME/.local/bin/eww")

; (defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
; (defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
; (defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")

; (defpoll memory :interval "15s" "scripts/memory")
; (defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
; (defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
; (defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
; (defvar vol_reveal false)
; (defvar br_reveal false)
; (defvar music_reveal false)
; (defvar wifi_rev false)

; (defpoll COL_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --COL")
; (defpoll ESSID_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --ESSID")
; (defpoll WLAN_ICON :interval "1m" "~/.config/eww/bar/scripts/wifi --ICON")

; (defpoll song :interval "2s"  "~/.config/eww/bar/scripts/music_info --song")
; (defpoll song_artist :interval "2s"  "~/.config/eww/bar/scripts/music_info --artist")
; (defpoll current_status :interval "1s"  "~/.config/eww/bar/scripts/music_info --time")
; (defpoll song_status :interval "2s"  "~/.config/eww/bar/scripts/music_info --status")
; (defpoll cover_art :interval "2s"  "~/.config/eww/bar/scripts/music_info --cover")

; (defpoll COL_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --COL")
; (defpoll ESSID_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --ESSID")
; (defpoll WLAN_ICON :interval "1m" "~/.config/eww/bar/scripts/wifi --ICON")

; (defpoll song :interval "2s"  "~/.config/eww/bar/scripts/music_info --song")
; (defpoll song_artist :interval "2s"  "~/.config/eww/bar/scripts/music_info --artist")
; (defpoll current_status :interval "1s"  "~/.config/eww/bar/scripts/music_info --time")
; (defpoll song_status :interval "2s"  "~/.config/eww/bar/scripts/music_info --status")
; (defpoll cover_art :interval "2s"  "~/.config/eww/bar/scripts/music_info --cover")

;; bar
(defwidget complex_bar [type]
  (box :class "bar_class"
       :orientation "h"
    (left)
    (center :type type)
    (right :type type)
))

(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "left_modules"
(workspaces)))

(defwidget center [type]
	(box :orientation "h" 
         :visible { type == "complex" }
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    (clock_module)
))
;         ;  (music)))

(defwidget right [type]
	(box :orientation "h" 
         :visible { type == "complex" }
		 :space-evenly false  
         :halign "end"
		 :class "right_modules"
    (powermenu))
)
; (bright)
; (volume)
; (wifi)
; (sep)
; (bat)
; (mem)
; (sep)


;; widgets

; (defwidget wifi [] 
;   (eventbox :onhover "${eww} update wifi_rev=true"
; 			  :onhoverlost "${eww} update wifi_rev=false"
; 		(box :vexpand "false" :hexpand "false" :space-evenly "false"
; 				(button :class "module-wif" :onclick "networkmanager_dmenu" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
; 	(revealer :transition "slideright"
; 			  :reveal wifi_rev
; 			  :duration "350ms"
; 	(label    :class "module_essid"
; 			  :text ESSID_WLAN
; 			  :orientation "h"
; 			  )))))




; (defwidget mem []
; 		(box :class "mem_module" :vexpand "false" :hexpand "false" 
;             (circular-progress :value memory
;                 :class "membar"
;                 :thickness 4
;             (button 
;                 :class "iconmem"
;                 :limit-width 2
;                 :tooltip "using ${memory}% ram"
;                 :onclick "$HOME/.config/eww/bar/scripts/pop system"
;                 :show_truncated false
;                 :wrap false
;                 ""))))



; (defwidget sep []
;   (box :class "module-2" :vexpand "false" :hexpand "false"
;     (label :class "separ" :text "|")))


; (defwidget volume []
;   (eventbox :onhover "${eww} update vol_reveal=true"
; 			  :onhoverlost "${eww} update vol_reveal=false"
;   (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
; 	(button   :onclick "scripts/pop audio"   :class "volume_icon" "")
; 	(revealer :transition "slideleft"
; 			  :reveal vol_reveal
; 			  :duration "350ms"
; 	(scale    :class "volbar"
; 			  :value volume_percent
; 			  :orientation "h"
; 			  :tooltip "${volume_percent}%"
; 			  :max 100
; 			  :min 0
; 			  :onchange "amixer -D pulse sset Master {}%" )))))

; (defwidget bright []
;   (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
;   (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
;     (label :text "" :class "bright_icon" :tooltip "brightness")
; 	(revealer :transition "slideleft"
; 			  :reveal br_reveal
; 			  :duration "350ms"
; 	(scale    :class "brightbar"
; 			  :value brightness_percent
; 			  :orientation "h"
; 			  :tooltip "${brightness_percent}%"
; 			  :max 100
; 			  :min 0
; 			  :onchange "brightnessctl set {}%" )))))



; 	;;  Music 












  
; (defwidget system []
;   (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
;   (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
;       (circular-progress :value battery
;                 :class "sys_bat"
;                 :thickness 9
;             (label :text ""
;                 :class "sys_icon_bat"
;                 :limit-width 2
;                 :show_truncated false
;                 :wrap false))
;             (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
;             (label :text "battery"
;                 :halign "start"
;                 :class "sys_text_bat"
;                 :limit-width 9
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${battery}%"
;                 :halign "start"
;                 :class "sys_text_bat_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${battery_status}"
;                 :halign "start"
;                 :class "sys_text_bat_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)))
;             (label :text "" :class "sys_sep" :halign "center")
;   (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
;       (circular-progress :value memory
;                 :class "sys_mem"
;                 :thickness 9
;             (label :text ""
;                 :class "sys_icon_mem"
;                 :limit-width 2
;                 :show_truncated false
;                 :wrap false
;                 :angle 0.0))
;             (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
;             (label :text "memory"
;                 :halign "start"
;                 :class "sys_text_mem"
;                 :limit-width 9
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${memory_used_mb} | ${memory_total_mb}mb "
;                 :halign "start"
;                 :class "sys_text_mem_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${memory_free_mb}mb free"
;                 :halign "start"
;                 :class "sys_text_mem_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)))))

; (defwidget audio []
; 	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
; 	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
; 	(box :class "speaker_icon" :orientation "v")
; 	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;     (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
; 	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
; 	(scale    :value volume_percent
;               :space-evenly "false"
; 			  :orientation "h"
; 			  :onchange "amixer -D pulse sset Master {}%" 
;               :tooltip "volume on ${volume_percent}%"
; 			  :max 100
; 			  :min 0))))
;             (label :text "" :class "audio_sep" :halign "center")
; 	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
; 	(box :class "mic_icon" :orientation "v")
; 	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;     (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
; 	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
; 	(scale    :value mic_percent
;               :space-evenly "false"
; 			  :orientation "h"
;               :tooltip "mic on ${mic_percent}%"
; 			  :onchange "amixer -D pulse sset Capture {}%" 
; 			  :max 100
; 			  :min 0))))))

; (defwindow audio_ctl
; 	:geometry (geometry :x "-20px" 
; 						:y "7%" 
;                         :anchor "top right"
; 						:width "280px" 
; 						:height "60px")
; (audio))
; (defwindow system
; 	:geometry (geometry :x "-20px" 
; 						:y "7%" 
;                         :anchor "top right"
; 						:width "290px" 
; 						:height "120px")
; (system))





